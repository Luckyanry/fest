{"version":3,"sources":["js/multi-animated-counter.js"],"names":["$","visibilityIds","counterClass","defaultSpeed","getVisibilityStatus","console","log","elValFromTop","windowHeight","window","height","windowScrollValFromTop","scrollTop","forEach","item","index","Math","ceil","offset","top","err","counter_init","groupId","num","speed","direction","each","attr","easing","undefined","addClass","doCount","groupClass","animate","duration","step","now","text","floor","complete","on"],"mappings":";AAAAA,EAAE,WACIC,IAAAA,EAAgB,CAAC,cAAe,cAAe,cAAe,SAC9DC,EAAe,WACfC,EAAe,IAaVC,SAAAA,IACPC,QAAQC,IAAI,UACZC,aAAe,GACXC,IAAAA,EAAeR,EAAES,QAAQC,SAC3BC,EAAyBX,EAAE,MAAMY,YAEnCX,EAAcY,QAAQ,SAASC,EAAMC,GAE/B,IAEFR,aAAaQ,GAASC,KAAKC,KAAKjB,EAAEc,GAAMI,SAASC,KACjD,MAAOC,GACP,OAIEZ,EAAeG,EAAyBJ,aAAaQ,IAMpDM,SAAaC,GAChBC,IAAAA,EACFC,EACAC,EACAV,EAAQ,EACVf,EAAEE,GAAcwB,KAAK,WACnBH,EAAMvB,EAAE,MAAM2B,KAAK,kBACnBH,EAAQxB,EAAE,MAAM2B,KAAK,cACrBF,EAAYzB,EAAE,MAAM2B,KAAK,kBACzBC,OAAS5B,EAAE,MAAM2B,KAAK,eACTE,MAATL,IAAoBA,EAAQrB,GAChCH,EAAE,MAAM8B,SAAS,KAAOf,GACxBgB,EAAQR,EAAKR,EAAOS,EAAOF,EAASG,EAAWG,QAC/Cb,MAlBEM,CAAaP,KAsBViB,SAAAA,EAAQR,EAAKR,EAAOS,EAAOQ,EAAYP,EAAWG,GAE3CC,MAAVD,IAAqBA,EAAS,SAClC5B,EAFgBgC,EAAa,IAAM9B,EAAe,MAAaa,GAElDkB,QACX,CACEV,IAAAA,GAEF,CACEW,UAAWV,EACXI,OAAQA,EACRO,KAAM,SAASC,GACI,WAAbX,EACFzB,EAAE,MAAMqC,KAAKd,EAAMP,KAAKsB,MAAMF,IAE9BpC,EAAE,MAAMqC,KAAKrB,KAAKsB,MAAMF,KAG5BG,SAAUR,IAhEhB/B,EAAES,QAAQ+B,GAAG,SAAU,WACrBpC,IACAC,QAAQC,IAAI,YAIdF","file":"multi-animated-counter.bd297dfc.js","sourceRoot":"../src","sourcesContent":["$(function() {\n  let visibilityIds = ['#counters_1', '#counters_2', '#counters_3', '#info'] //must be an array, could have only one element\n  let counterClass = '.counter'\n  let defaultSpeed = 3000 //default value\n\n  // END CONFIG\n\n  //init if it becomes visible by scrolling\n  $(window).on('scroll', function() {\n    getVisibilityStatus()\n    console.log('scroll')\n  })\n\n  //init if it's visible by page loading\n  getVisibilityStatus()\n\n  function getVisibilityStatus() {\n    console.log('status')\n    elValFromTop = []\n    var windowHeight = $(window).height(),\n      windowScrollValFromTop = $(this).scrollTop()\n\n    visibilityIds.forEach(function(item, index) {\n      //Call each class\n      try {\n        //avoid error if class not exist\n        elValFromTop[index] = Math.ceil($(item).offset().top)\n      } catch (err) {\n        return\n      }\n      // if the sum of the window height and scroll distance from the top is greater than the target element's distance from the top,\n      //it should be in view and the event should fire, otherwise reverse any previously applied methods\n      if (windowHeight + windowScrollValFromTop > elValFromTop[index]) {\n        counter_init(item)\n      }\n    })\n  }\n\n  function counter_init(groupId) {\n    let num,\n      speed,\n      direction,\n      index = 0\n    $(counterClass).each(function() {\n      num = $(this).attr('data-TargetNum')\n      speed = $(this).attr('data-Speed')\n      direction = $(this).attr('data-Direction')\n      easing = $(this).attr('data-Easing')\n      if (speed == undefined) speed = defaultSpeed\n      $(this).addClass('c_' + index) //add a class to recognize each counter\n      doCount(num, index, speed, groupId, direction, easing)\n      index++\n    })\n  }\n\n  function doCount(num, index, speed, groupClass, direction, easing) {\n    let className = groupClass + ' ' + counterClass + '.' + 'c_' + index\n    if (easing == undefined) easing = 'swing'\n    $(className).animate(\n      {\n        num,\n      },\n      {\n        duration: +speed,\n        easing: easing,\n        step: function(now) {\n          if (direction == 'reverse') {\n            $(this).text(num - Math.floor(now))\n          } else {\n            $(this).text(Math.floor(now))\n          }\n        },\n        complete: doCount,\n      },\n    )\n  }\n})\n"]}